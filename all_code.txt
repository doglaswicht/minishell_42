===== File: ./src/libft/ft_isdigit.c =====
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_isdigit.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pedroribeiro <pedroribeiro@student.42.f    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/10 20:06:09 by pedroribeir       #+#    #+#             */
/*   Updated: 2024/11/10 21:10:47 by pedroribeir      ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

int	ft_isdigit(int c)
{
	if (c >= '0' && c <= '9')
		return (1);
	return (0);
}



===== File: ./src/libft/ft_toupper.c =====
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_toupper.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pedroribeiro <pedroribeiro@student.42.f    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/10 23:30:47 by pedroribeir       #+#    #+#             */
/*   Updated: 2024/11/10 23:32:00 by pedroribeir      ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

int	ft_toupper(int c)
{
	if (c >= 'a' && c <= 'z')
		return (c - 32);
	return (c);
}



===== File: ./src/libft/ft_strncmp.c =====
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strncmp.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pedroribeiro <pedroribeiro@student.42.f    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 00:54:15 by pedroribeir       #+#    #+#             */
/*   Updated: 2024/11/11 00:58:57 by pedroribeir      ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

int	ft_strncmp(const char *s1, const char *s2, size_t n)
{
	size_t	i;

	i = 0;
	while (i < n)
	{
		if (s1[i] != s2[i] || s1[i] == '\0' || s2[i] == '\0')
			return ((unsigned char)s1[i] - (unsigned char)s2[i]);
		i++;
	}
	return (0);
}



===== File: ./src/libft/ft_putstr_fd.c =====
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_putstr_fd.c                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pedroribeiro <pedroribeiro@student.42.f    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 18:25:02 by pedroribeir       #+#    #+#             */
/*   Updated: 2025/05/01 12:02:40 by pedroribeir      ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

void	ft_putstr_fd(char *s, int fd)
{
	int	i;

	if (s == NULL)
		return ;
	i = 0;
	while (s[i] != '\0')
	{
		write(fd, &s[i], 1);
		i++;
	}
}



===== File: ./src/libft/ft_memcpy.c =====
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_memcpy.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pedroribeiro <pedroribeiro@student.42.f    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/10 21:06:59 by pedroribeir       #+#    #+#             */
/*   Updated: 2024/11/10 21:12:00 by pedroribeir      ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

void	*ft_memcpy(void *dst, const void *src, size_t n)
{
	unsigned char	*d;
	unsigned char	*s;
	size_t			i;

	d = (unsigned char *)dst;
	s = (unsigned char *)src;
	i = 0;
	while (i < n)
	{
		d[i] = s[i];
		i++;
	}
	return (dst);
}



===== File: ./src/libft/ft_isprint.c =====
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_isprint.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pedroribeiro <pedroribeiro@student.42.f    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/10 20:07:47 by pedroribeir       #+#    #+#             */
/*   Updated: 2024/11/10 20:08:18 by pedroribeir      ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

int	ft_isprint(int c)
{
	if (c >= 32 && c <= 126)
		return (1);
	return (0);
}



===== File: ./src/libft/ft_putendl_fd.c =====
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_putendl_fd.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pedroribeiro <pedroribeiro@student.42.f    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 20:03:26 by pedroribeir       #+#    #+#             */
/*   Updated: 2025/05/01 12:02:13 by pedroribeir      ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

void	ft_putendl_fd(char *s, int fd)
{
	int	i;

	if (s == NULL)
		return ;
	i = 0;
	while (s[i] != '\0')
	{
		write(fd, &s[i], 1);
		i++;
	}
	write(fd, "\n", 1);
}



===== File: ./src/libft/ft_memcmp.c =====
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_memcmp.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pedroribeiro <pedroribeiro@student.42.f    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 01:00:03 by pedroribeir       #+#    #+#             */
/*   Updated: 2024/11/11 01:02:05 by pedroribeir      ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

int	ft_memcmp(const void *s1, const void *s2, size_t n)
{
	const unsigned char	*ptr1;
	const unsigned char	*ptr2;
	size_t				i;

	ptr1 = (const unsigned char *)s1;
	ptr2 = (const unsigned char *)s2;
	i = 0;
	while (i < n)
	{
		if (ptr1[i] != ptr2[i])
			return (ptr1[i] - ptr2[i]);
		i++;
	}
	return (0);
}



===== File: ./src/libft/ft_split.c =====
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_split.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pedroribeiro <pedroribeiro@student.42.f    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 03:01:04 by pedroribeir       #+#    #+#             */
/*   Updated: 2024/11/11 03:08:08 by pedroribeir      ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

static int	count_words(const char *s, char c)
{
	int	count;
	int	in_word;

	count = 0;
	in_word = 0;
	while (*s)
	{
		if (*s != c && in_word == 0)
		{
			in_word = 1;
			count++;
		}
		else if (*s == c)
			in_word = 0;
		s++;
	}
	return (count);
}

static char	*copy_word(const char *s, int len)
{
	char	*word;
	int		i;

	word = (char *)malloc(sizeof(char) * (len + 1));
	if (!word)
		return (NULL);
	i = 0;
	while (i < len)
	{
		word[i] = s[i];
		i++;
	}
	word[i] = '\0';
	return (word);
}

static void	free_words(char **words, int i)
{
	while (i > 0)
	{
		free(words[i - 1]);
		i--;
	}
	free(words);
}

char	**ft_split(char const *s, char c)
{
	char	**words;
	int		i;
	int		len;

	words = (char **)malloc(sizeof(char *) * (count_words(s, c) + 1));
	if (!words || !s)
		return (NULL);
	i = 0;
	while (*s)
	{
		if (*s != c)
		{
			len = 0;
			while (s[len] && s[len] != c)
				len++;
			words[i] = copy_word(s, len);
			if (!words[i++])
				return (free_words(words, i - 1), NULL);
			s += len;
		}
		else
			s++;
	}
	words[i] = NULL;
	return (words);
}



===== File: ./src/libft/ft_striteri.c =====
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_striteri.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pedroribeiro <pedroribeiro@student.42.f    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 18:15:48 by pedroribeir       #+#    #+#             */
/*   Updated: 2025/05/01 12:02:24 by pedroribeir      ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

void	ft_striteri(char *s, void (*f)(unsigned int, char *))
{
	unsigned int	i;

	if (s == NULL || f == NULL)
		return ;
	i = 0;
	while (s[i] != '\0')
	{
		f(i, &s[i]);
		i++;
	}
}



===== File: ./src/libft/ft_free_split.c =====
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_free_split.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: procha-r <procha-r@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/05/01 12:40:21 by procha-r          #+#    #+#             */
/*   Updated: 2025/05/01 15:43:59 by procha-r         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdlib.h>

void	ft_free_split(char **split)
{
	int	i;

	if (!split)
		return ;
	i = 0;
	while (split[i] != NULL)
	{
		free(split[i]);
		i++;
	}
	free(split);
}



===== File: ./src/libft/ft_tolower.c =====
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_tolower.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pedroribeiro <pedroribeiro@student.42.f    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/10 23:32:24 by pedroribeir       #+#    #+#             */
/*   Updated: 2024/11/10 23:33:42 by pedroribeir      ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

int	ft_tolower(int c)
{
	if (c >= 'A' && c <= 'Z')
		return (c + 32);
	return (c);
}



===== File: ./src/libft/ft_strlen.c =====
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strlen.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pedroribeiro <pedroribeiro@student.42.f    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/10 20:35:08 by pedroribeir       #+#    #+#             */
/*   Updated: 2024/11/10 20:36:17 by pedroribeir      ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

size_t	ft_strlen(const char *s)
{
	int	i;

	i = 0;
	while (s[i])
		i++;
	return (i);
}



===== File: ./src/libft/ft_strlcat.c =====
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strlcat.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pedroribeiro <pedroribeiro@student.42.f    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/10 22:33:03 by pedroribeir       #+#    #+#             */
/*   Updated: 2024/11/10 23:32:03 by pedroribeir      ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

size_t	ft_strlcat(char *dest, const char *src, size_t size)
{
	size_t	dest_len;
	size_t	src_len;
	size_t	i;

	dest_len = ft_strlen(dest);
	src_len = ft_strlen(src);
	if (size <= dest_len)
		return (src_len + size);
	i = 0;
	while (src[i] && (dest_len + i) < (size - 1))
	{
		dest[dest_len + i] = src[i];
		i++;
	}
	dest[dest_len + i] = '\0';
	return (dest_len + src_len);
}



===== File: ./src/libft/ft_bzero.c =====
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_bzero.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pedroribeiro <pedroribeiro@student.42.f    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/10 21:03:39 by pedroribeir       #+#    #+#             */
/*   Updated: 2024/11/10 21:06:19 by pedroribeir      ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

void	ft_bzero(void *s, size_t n)
{
	size_t			i;
	unsigned char	*ptr;

	ptr = (unsigned char *)s;
	i = 0;
	while (i < n)
	{
		ptr[i] = 0;
		i++;
	}
}



===== File: ./src/libft/ft_atoi.c =====
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_atoi.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pedroribeiro <pedroribeiro@student.42.f    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 01:08:26 by pedroribeir       #+#    #+#             */
/*   Updated: 2024/11/17 20:14:21 by pedroribeir      ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

int	ft_atoi(const char *str)
{
	int	i;
	int	sign;
	int	result;

	i = 0;
	sign = 1;
	result = 0;
	while ((str[i] >= 9 && str[i] <= 13) || str[i] == ' ')
		i++;
	if (str[i] == '-' || str[i] == '+')
	{
		if (str[i] == '-')
			sign = -1;
		i++;
	}
	while (str[i] >= '0' && str[i] <= '9')
	{
		result = result * 10 + (str[i] - '0');
		i++;
	}
	return (result * sign);
}



===== File: ./src/libft/ft_putchar_fd.c =====
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_putchar_fd.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pedroribeiro <pedroribeiro@student.42.f    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 18:22:30 by pedroribeir       #+#    #+#             */
/*   Updated: 2024/11/11 18:23:34 by pedroribeir      ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

void	ft_putchar_fd(char c, int fd)
{
	write(fd, &c, 1);
}



===== File: ./src/libft/ft_memset.c =====
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_memset.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pedroribeiro <pedroribeiro@student.42.f    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/10 20:37:54 by pedroribeir       #+#    #+#             */
/*   Updated: 2024/11/10 20:40:47 by pedroribeir      ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

void	*ft_memset(void *b, int c, size_t len)
{
	unsigned char	*ptr;
	size_t			i;

	ptr = (unsigned char *)b;
	i = 0;
	while (i < len)
	{
		ptr[i] = (unsigned char)c;
		i++;
	}
	return (b);
}



===== File: ./src/libft/ft_putnbr_fd.c =====
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_putnbr_fd.c                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pedroribeiro <pedroribeiro@student.42.f    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 20:11:11 by pedroribeir       #+#    #+#             */
/*   Updated: 2024/11/11 20:13:14 by pedroribeir      ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

void	ft_putnbr_fd(int n, int fd)
{
	char	c;

	if (n == -2147483648)
	{
		write(fd, "-2147483648", 11);
		return ;
	}
	if (n < 0)
	{
		write(fd, "-", 1);
		n = -n;
	}
	if (n >= 10)
	{
		ft_putnbr_fd(n / 10, fd);
	}
	c = (n % 10) + '0';
	write(fd, &c, 1);
}



===== File: ./src/libft/ft_strrchr.c =====
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strrchr.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pedroribeiro <pedroribeiro@student.42.f    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/10 23:52:35 by pedroribeir       #+#    #+#             */
/*   Updated: 2024/11/11 00:16:02 by pedroribeir      ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

char	*ft_strrchr(const char *s, int c)
{
	const char	*ptr;

	ptr = s;
	while (*ptr != '\0')
		ptr++;
	while (ptr != s - 1)
	{
		if (*ptr == (char)c)
			return ((char *)ptr);
		ptr--;
	}
	return (NULL);
}



===== File: ./src/libft/ft_strlcpy.c =====
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strlcpy.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pedroribeiro <pedroribeiro@student.42.f    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/10 21:19:31 by pedroribeir       #+#    #+#             */
/*   Updated: 2024/11/10 21:22:27 by pedroribeir      ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

size_t	ft_strlcpy(char *dst, const char *src, size_t size)
{
	const char	*src_char;
	size_t		src_len;
	size_t		i;

	src_char = (const char *)src;
	src_len = ft_strlen(src_char);
	i = 0;
	if (size > 0)
	{
		while (src_char[i] && i < (size - 1))
		{
			dst[i] = src_char[i];
			i++;
		}
		dst[i] = '\0';
	}
	return (src_len);
}



===== File: ./src/libft/ft_isascii.c =====
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_isascii.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pedroribeiro <pedroribeiro@student.42.f    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/10 20:29:27 by pedroribeir       #+#    #+#             */
/*   Updated: 2024/11/10 20:34:17 by pedroribeir      ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

int	ft_isascii(int c)
{
	if (c >= 0 && c <= 127)
		return (1);
	return (0);
}



===== File: ./src/libft/ft_strjoin.c =====
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strjoin.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pedroribeiro <pedroribeiro@student.42.f    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 02:22:34 by pedroribeir       #+#    #+#             */
/*   Updated: 2024/11/11 02:32:16 by pedroribeir      ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

static void	copy_str(char *dest, const char *src, size_t start)
{
	size_t	i;

	i = 0;
	while (src[i] != '\0')
	{
		dest[start + i] = src[i];
		i++;
	}
}

char	*ft_strjoin(char const *s1, char const *s2)
{
	char	*joined_str;
	size_t	s1_len;
	size_t	s2_len;

	if (!s1 || !s2)
		return (NULL);
	s1_len = ft_strlen(s1);
	s2_len = ft_strlen(s2);
	joined_str = (char *)malloc(sizeof(char) * (s1_len + s2_len + 1));
	if (!joined_str)
		return (NULL);
	copy_str(joined_str, s1, 0);
	copy_str(joined_str, s2, s1_len);
	joined_str[s1_len + s2_len] = '\0';
	return (joined_str);
}



===== File: ./src/libft/ft_memmove.c =====
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_memmove.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pedroribeiro <pedroribeiro@student.42.f    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/10 21:13:36 by pedroribeir       #+#    #+#             */
/*   Updated: 2024/11/10 21:18:46 by pedroribeir      ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

static void	copy_forward(unsigned char *dst, \
		const unsigned char *src, size_t len)
{
	size_t	i;

	i = 0;
	while (i < len)
	{
		dst[i] = src[i];
		i++;
	}
}

static void	copy_backward(unsigned char *dst, \
		const unsigned char *src, size_t len)
{
	while (len > 0)
	{
		len--;
		dst[len] = src[len];
	}
}

void	*ft_memmove(void *dst, const void *src, size_t len)
{
	unsigned char		*d;
	const unsigned char	*s;

	if (dst == src || len == 0)
		return (dst);
	d = (unsigned char *)dst;
	s = (const unsigned char *)src;
	if (d < s)
		copy_forward(d, s, len);
	else
		copy_backward(d, s, len);
	return (dst);
}



===== File: ./src/libft/ft_isalnum.c =====
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_isalnum.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pedroribeiro <pedroribeiro@student.42.f    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/10 20:28:15 by pedroribeir       #+#    #+#             */
/*   Updated: 2024/11/10 20:34:45 by pedroribeir      ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

int	ft_isalnum(int c)
{
	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') \
		|| (c >= '0' && c <= '9'))
		return (1);
	return (0);
}



===== File: ./src/libft/ft_calloc.c =====
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_calloc.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pedroribeiro <pedroribeiro@student.42.f    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 01:49:44 by pedroribeir       #+#    #+#             */
/*   Updated: 2024/11/11 01:53:05 by pedroribeir      ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

void	*ft_calloc(size_t count, size_t size)
{
	void	*ptr;
	size_t	total_size;

	total_size = count * size;
	ptr = malloc(total_size);
	if (ptr == NULL)
		return (NULL);
	ft_bzero(ptr, total_size);
	return (ptr);
}



===== File: ./src/libft/ft_strdup.c =====
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strdup.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pedroribeiro <pedroribeiro@student.42.f    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 01:56:22 by pedroribeir       #+#    #+#             */
/*   Updated: 2024/11/11 02:02:08 by pedroribeir      ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

char	*ft_strdup(const char *s1)
{
	size_t	len;
	char	*dup;
	size_t	i;

	len = ft_strlen(s1);
	dup = (char *)malloc((len + 1) * sizeof(char));
	if (!dup)
		return (NULL);
	i = 0;
	while (i < len)
	{
		dup[i] = s1[i];
		i++;
	}
	dup[i] = '\0';
	return (dup);
}



===== File: ./src/libft/ft_memchr.c =====
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_memchr.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pedroribeiro <pedroribeiro@student.42.f    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 00:16:42 by pedroribeir       #+#    #+#             */
/*   Updated: 2024/11/11 00:19:25 by pedroribeir      ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

void	*ft_memchr(const void *s, int c, size_t n)
{
	const unsigned char	*ptr;
	size_t				i;

	ptr = (const unsigned char *)s;
	i = 0;
	while (i < n)
	{
		if (ptr[i] == (unsigned char)c)
			return ((void *)&ptr[i]);
		i++;
	}
	return (NULL);
}



===== File: ./src/libft/ft_substr.c =====
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_substr.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pedroribeiro <pedroribeiro@student.42.f    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 02:02:47 by pedroribeir       #+#    #+#             */
/*   Updated: 2024/11/11 02:09:53 by pedroribeir      ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

char	*ft_substr(char const *s, unsigned int start, size_t len)
{
	char	*substr;
	size_t	s_len;
	size_t	i;

	if (!s)
		return (NULL);
	s_len = ft_strlen(s);
	if (start >= s_len)
		return (ft_strdup(""));
	if (len > s_len - start)
		len = s_len - start;
	substr = (char *)malloc(sizeof(char) * (len + 1));
	if (!substr)
		return (NULL);
	i = 0;
	while (i < len && s[start + i] != '\0')
	{
		substr[i] = s[start + i];
		i++;
	}
	substr[i] = '\0';
	return (substr);
}



===== File: ./src/libft/ft_strchr.c =====
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strchr.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pedroribeiro <pedroribeiro@student.42.f    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/10 23:34:44 by pedroribeir       #+#    #+#             */
/*   Updated: 2024/11/10 23:36:35 by pedroribeir      ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

char	*ft_strchr(const char *s, int c)
{
	while (*s != '\0')
	{
		if (*s == (char)c)
			return ((char *)s);
		s++;
	}
	if ((char)c == '\0')
		return ((char *)s);
	return (NULL);
}



===== File: ./src/libft/ft_strtrim.c =====
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strtrim.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pedroribeiro <pedroribeiro@student.42.f    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 02:34:43 by pedroribeir       #+#    #+#             */
/*   Updated: 2024/11/11 02:50:11 by pedroribeir      ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

static int	is_in_set(char c, const char *set)
{
	while (*set)
	{
		if (c == *set)
			return (1);
		set++;
	}
	return (0);
}

char	*ft_strtrim(char const *s1, char const *set)
{
	size_t	start;
	size_t	end;
	char	*trimmed;

	if (!s1 || !set)
		return (NULL);
	start = 0;
	while (s1[start] && is_in_set(s1[start], set))
		start++;
	end = ft_strlen(s1);
	while (end > start && is_in_set(s1[end - 1], set))
		end--;
	trimmed = (char *)malloc(sizeof(char) * (end - start + 1));
	if (!trimmed)
		return (NULL);
	ft_strlcpy(trimmed, &s1[start], end - start + 1);
	return (trimmed);
}



===== File: ./src/libft/ft_itoa.c =====
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_itoa.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pedroribeiro <pedroribeiro@student.42.f    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 17:54:21 by pedroribeir       #+#    #+#             */
/*   Updated: 2024/11/11 18:04:15 by pedroribeir      ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

static int	count_digits(int n)
{
	int	digits;

	digits = 0;
	if (n <= 0)
		digits++;
	while (n != 0)
	{
		n = n / 10;
		digits++;
	}
	return (digits);
}

char	*ft_itoa(int n)
{
	char	*str;
	int		len;
	long	nb;

	len = count_digits(n);
	str = (char *)malloc(sizeof(char) * (len + 1));
	if (!str)
		return (NULL);
	nb = n;
	if (nb < 0)
	{
		str[0] = '-';
		nb = -nb;
	}
	str[len] = '\0';
	while (len-- && str[len] != '-')
	{
		str[len] = (nb % 10) + '0';
		nb = nb / 10;
	}
	return (str);
}



===== File: ./src/libft/ft_strnstr.c =====
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strnstr.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pedroribeiro <pedroribeiro@student.42.f    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 01:02:55 by pedroribeir       #+#    #+#             */
/*   Updated: 2024/11/11 01:50:54 by pedroribeir      ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

char	*ft_strnstr(const char *big, const char *little, size_t len)
{
	size_t	i;
	size_t	j;

	if (*little == '\0')
		return ((char *)big);
	i = 0;
	while (big[i] != '\0' && i < len)
	{
		if (big[i] == little[0])
		{
			j = 0;
			while (little[j] != '\0' && big[i + j] != '\0'
				&& big[i + j] == little[j] && (i + j) < len)
			{
				j++;
			}
			if (little[j] == '\0')
				return ((char *)&big[i]);
		}
		i++;
	}
	return (NULL);
}



===== File: ./src/libft/ft_strmapi.c =====
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strmapi.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pedroribeiro <pedroribeiro@student.42.f    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 18:09:32 by pedroribeir       #+#    #+#             */
/*   Updated: 2024/11/11 18:14:59 by pedroribeir      ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))
{
	char			*result;
	unsigned int	i;
	unsigned int	len;

	if (!s || !f)
		return (NULL);
	len = 0;
	while (s[len] != '\0')
		len++;
	result = (char *)malloc(sizeof(char) * (len + 1));
	if (!result)
		return (NULL);
	i = 0;
	while (i < len)
	{
		result[i] = f(i, s[i]);
		i++;
	}
	result[i] = '\0';
	return (result);
}



===== File: ./src/libft/ft_strndup.c =====
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strndup.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pedroribeiro <pedroribeiro@student.42.f    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/06 12:09:48 by pedroribeir       #+#    #+#             */
/*   Updated: 2025/06/06 12:09:54 by pedroribeir      ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdlib.h>
#include "libft.h"

char	*ft_strndup(const char *s, size_t n)
{
	char	*new;
	size_t	i;

	new = (char *)malloc(sizeof(char) * (n + 1));
	if (!new)
		return (NULL);
	i = 0;
	while (s[i] && i < n)
	{
		new[i] = s[i];
		i++;
	}
	new[i] = '\0';
	return (new);
}


===== File: ./src/libft/ft_atol.c =====
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_atol.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: procha-r <procha-r@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/29 16:58:55 by procha-r          #+#    #+#             */
/*   Updated: 2025/04/29 17:20:45 by procha-r         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_atol.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: procha-r <procha-r@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/29 17:20:00 by procha-r          #+#    #+#             */
/*   Updated: 2025/04/29 17:20:00 by procha-r         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

long	ft_atol(const char *str)
{
	long	result;
	int		sign;
	int		i;

	result = 0;
	sign = 1;
	i = 0;
	while (str[i] == ' ' || (str[i] >= 9 && str[i] <= 13))
		i++;
	if (str[i] == '-' || str[i] == '+')
	{
		if (str[i] == '-')
			sign = -1;
		i++;
	}
	while (str[i] >= '0' && str[i] <= '9')
	{
		result = result * 10 + (str[i] - '0');
		i++;
	}
	return (result * sign);
}



===== File: ./src/libft/ft_isalpha.c =====
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_isalpha.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pedroribeiro <pedroribeiro@student.42.f    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/10 20:00:49 by pedroribeir       #+#    #+#             */
/*   Updated: 2024/11/10 20:05:43 by pedroribeir      ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

int	ft_isalpha(int c)
{
	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
		return (1);
	return (0);
}



===== File: ./src/signals/signal_echoctl.c =====
#include "signals.h"
#include <termios.h>
#include <unistd.h>

void    disable_echoctl(void)
{
    struct termios    term;

    if (tcgetattr(STDIN_FILENO, &term) == -1)
        return ;
    term.c_lflag &= ~ECHOCTL;
    tcsetattr(STDIN_FILENO, TCSANOW, &term);
}

void    enable_echoctl(void)
{
    struct termios    term;

    if (tcgetattr(STDIN_FILENO, &term) == -1)
        return ;
    term.c_lflag |= ECHOCTL;
    tcsetattr(STDIN_FILENO, TCSANOW, &term);
}


===== File: ./src/signals/signal_init.c =====
#include "signals.h"
#include <signal.h>


void    init_signals(void)
{
	disable_echoctl();
    signal(SIGINT, signal_handler_parent);
    signal(SIGQUIT, signal_handler_parent);
    set_signal_code(0);
}

void	reset_signals(void)
{
	enable_echoctl();
    signal(SIGINT, signal_handler_child);
    signal(SIGQUIT, signal_handler_child);
}



===== File: ./src/signals/signal_handlers.c =====
#include "signals.h"
#include <signal.h>
#include <readline/readline.h>
#include <unistd.h>

/*
** Handlers para sinais no processo pai e processo filho.
*/

void    signal_handler_parent(int sig)
{
    if (sig == SIGINT)
    {
        set_signal_code(130);
        rl_on_new_line();
        rl_replace_line("", 0);
        write(1, "\n", 1);
        rl_redisplay();
    }
    else if (sig == SIGQUIT)
    {
        set_signal_code(131);
        rl_on_new_line();
        rl_replace_line("", 0);
        rl_redisplay();
    }
}

void    signal_handler_child(int sig)
{
    if (sig == SIGINT)
    {
        set_signal_code(130);
        write(1, "\n", 1);
    }
    else if (sig == SIGQUIT)
    {
        set_signal_code(131);
        write(1, "Quit (core dumped)\n", 19);
    }
}


===== File: ./src/signals/signal_global.c =====
#include "signals.h"

static int g_signal_code = 0;

void    set_signal_code(int code)
{
    g_signal_code = code;
}

int     get_signal_code(void)
{
    return (g_signal_code);
}


===== File: ./src/main/shell_loop.c =====
#include "minishell.h"
#include <readline/readline.h>
#include <readline/history.h>

static void process_line(char *line, t_shell *shell)
{
    t_token *tokens;
    t_cmd   *cmds;

    tokens = tokenize_input(line);
    cmds = parse_tokens_to_cmds(tokens);
    if (cmds)
        execute_pipeline(cmds, shell);
    free_command_list(cmds);
    free_token_list(tokens);
    free_user_input(line);
}

int shell_loop(t_shell *shell)
{
    char    *line;

    init_prompt();
    shell->is_running = 1;
    while (shell->is_running && is_interactive_shell())
    {
        line = read_user_input();
        if (!line)
            break ;
        if (*line)
            add_history(line);
        process_line(line, shell);
        set_last_status(shell->last_exit_code);
    }
    return (0);
}


===== File: ./src/main/main.c =====
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pedroribeiro <pedroribeiro@student.42.f    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/05/26 20:05:33 by procha-r          #+#    #+#             */
/*   Updated: 2025/06/06 11:48:28 by pedroribeir      ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "minishell.h"

int	main(int argc, char **argv, char **envp)
{
	t_shell	shell;

	(void)argc;
	(void)argv;
	
    shell.env = init_env_from_environ(envp);
    shell.last_exit_code = 0;
    shell_loop(&shell);
    exit_clean(&shell, 0);
    return (0);
}


===== File: ./src/utils/error.c =====
#include "utils.h"
#include "libft.h"

/*
** print_error
** ---------------------------------------------------------------------------
** Writes the given error message to STDERR followed by a newline.  If the
** message pointer is NULL nothing is printed.  This function does not append
** any prefix to the message, leaving formatting to the caller.
*/
void print_error(const char *msg)
{
    if (msg)
        ft_putendl_fd((char *)msg, 2);
}

/*
** print_strs
** ---------------------------------------------------------------------------
** Utility function used for debugging purposes.  Receives a NULL-terminated
** array of strings and prints each element in its own line to STDOUT.  If the
** array itself is NULL, the function simply returns without producing any
** output.
*/
void print_strs(char **arr)
{
    int index;

    if (!arr)
        return ;
    index = 0;
    while (arr[index])
    {
        ft_putendl_fd(arr[index], 1);
        index++;
    }
}


===== File: ./src/utils/free_utils.c =====
#include "cleanup.h"
#include "libft.h"

/*
** free_split
** ---------------------------------------------------------------------------
** Wrapper around libft's ft_free_split to centralise freeing logic.
*/
void    free_split(char **arr)
{
    ft_free_split(arr);
}


===== File: ./src/utils/malloc_helpers.c =====
#include "utils.h"
#include "libft.h"
#include <stdlib.h>

/*
** safe_malloc
** ---------------------------------------------------------------------------
** Allocates memory of the requested size.  If the allocation fails the
** function prints an error message and terminates the program with EXIT_FAILURE.
*/
void *safe_malloc(size_t size)
{
    void    *ptr;

    ptr = malloc(size);
    if (!ptr)
    {
        print_error("malloc failed");
        exit(EXIT_FAILURE);
    }
    return (ptr);
}

/*
** safe_calloc
** ---------------------------------------------------------------------------
** Allocates zero-initialised memory for an array.  Behaves like safe_malloc
** regarding error handling.
*/
void *safe_calloc(size_t count, size_t size)
{
    void    *ptr;

    ptr = ft_calloc(count, size);
    if (!ptr)
    {
        print_error("calloc failed");
        exit(EXIT_FAILURE);
    }
    return (ptr);
}

/*
** safe_strdup
** ---------------------------------------------------------------------------
** Duplicates a string using ft_strdup and exits on allocation failure.
*/
char *safe_strdup(const char *s)
{
    char    *dup;

    if (!s)
        return (NULL);
    dup = ft_strdup(s);
    if (!dup)
    {
        print_error("strdup failed");
        exit(EXIT_FAILURE);
    }
    return (dup);
}



===== File: ./src/utils/str_utils.c =====
#include "utils.h"
#include "libft.h"
#include <limits.h>

/*
** ft_strdup_range
** ---------------------------------------------------------------------------
** Duplicates a substring from `src` starting at index `start` (inclusive) and
** ending at index `end` (exclusive).  Returns a newly allocated string or NULL
** on error or if `start` is greater than `end`.
*/
char *ft_strdup_range(const char *src, int start, int end)
{
    char    *dup;
    int     i;
    int     len;

    if (!src || start < 0 || end < start)
        return (NULL);
    len = end - start;
    dup = safe_malloc(len + 1);
    i = 0;
    while (i < len && src[start + i])
    {
        dup[i] = src[start + i];
        i++;
    }
    dup[i] = '\0';
    return (dup);
}

/*
** count_char
** ---------------------------------------------------------------------------
** Counts the occurrences of character `c` in the given string `str`.
*/
int count_char(const char *str, char c)
{
    int count;

    if (!str)
        return (0);
    count = 0;
    while (*str)
    {
        if (*str == c)
            count++;
        str++;
    }
    return (count);
}

/*
** split_len
** ---------------------------------------------------------------------------
** Returns the number of elements in a NULL-terminated array of strings.  If
** the array is NULL the function returns 0.
*/
int split_len(char **arr)
{
    int i;

    if (!arr)
        return (0);
    i = 0;
    while (arr[i])
        i++;
    return (i);
}

/*
** ft_atoi_strict
** ---------------------------------------------------------------------------
** Converts the string `str` to an integer storing the result in `out`.  The
** conversion is strict: the function returns 0 if the string contains invalid
** characters or if the value would overflow/underflow an `int`.  On success the
** converted value is stored in `out` and the function returns 1.
*/
int ft_atoi_strict(const char *str, int *out)
{
    long    result;
    int     sign;
    int     i;

    if (!str || !out)
        return (0);
    i = 0;
    sign = 1;
    if (str[i] == '+' || str[i] == '-')
    {
        if (str[i] == '-')
            sign = -1;
        i++;
    }
    if (!ft_isdigit((unsigned char)str[i]))
        return (0);
    result = 0;
    while (str[i])
    {
        if (!ft_isdigit((unsigned char)str[i]))
            return (0);
        result = result * 10 + (str[i] - '0');
        if (sign == 1 && result > INT_MAX)
            return (0);
        if (sign == -1 && -result < INT_MIN)
            return (0);
        i++;
    }
    *out = (int)(result * sign);
    return (1);
}


===== File: ./src/utils/str_join.c =====
#include "utils.h"
#include "libft.h"
#include <stdlib.h>

/*
** ft_strjoin_free
** ---------------------------------------------------------------------------
** Joins two strings returning a newly allocated string containing the
** concatenation of s1 and s2.  The first string (s1) is freed.  If either
** parameter is NULL the function behaves accordingly:
**   - if s1 is NULL, a duplicate of s2 is returned;
**   - if s2 is NULL, s1 is returned (already allocated) without modification.
*/
char *ft_strjoin_free(char *s1, char *s2)
{
    char    *joined;

    if (!s1 && !s2)
        return (NULL);
    if (!s1)
        return (safe_strdup(s2));
    if (!s2)
        return (s1);
    joined = ft_strjoin(s1, s2);
    if (!joined)
    {
        free(s1);
        print_error("strjoin failed");
        return (NULL);
    }
    free(s1);
    return (joined);
}


===== File: ./src/builtin/dispatcher.c =====
#include "builtin.h"
#include "libft.h"

static int  str_eq(const char *a, const char *b)
{
    return (ft_strncmp(a, b, ft_strlen(a)) == 0 && ft_strlen(a) == ft_strlen(b));
}

int     is_builtin(t_cmd *cmd)
{
    if (!cmd || !cmd->argv || !cmd->argv[0])
        return (0);
    if (str_eq(cmd->argv[0], "echo") || str_eq(cmd->argv[0], "cd")
        || str_eq(cmd->argv[0], "pwd") || str_eq(cmd->argv[0], "env")
        || str_eq(cmd->argv[0], "export") || str_eq(cmd->argv[0], "unset")
        || str_eq(cmd->argv[0], "exit"))
        return (1);
    return (0);
}

int     execute_builtin(t_cmd *cmd, t_shell *shell)
{
    if (!cmd || !cmd->argv || !cmd->argv[0])
        return (1);
    if (str_eq(cmd->argv[0], "echo"))
        return (builtin_echo(cmd));
    if (str_eq(cmd->argv[0], "cd"))
        return (builtin_cd(cmd, shell));
    if (str_eq(cmd->argv[0], "pwd"))
        return (builtin_pwd());
    if (str_eq(cmd->argv[0], "env"))
        return (builtin_env(cmd, shell->env));
    if (str_eq(cmd->argv[0], "export"))
        return (builtin_export(cmd, shell));
    if (str_eq(cmd->argv[0], "unset"))
        return (builtin_unset(cmd, shell));
    if (str_eq(cmd->argv[0], "exit"))
        return (builtin_exit(cmd, shell));
    return (1);
}


===== File: ./src/builtin/env.c =====
#include "builtin.h"

int     builtin_env(t_cmd *cmd, t_env *env)
{
    (void)cmd;
    print_env_list(env);
    return (0);
}


===== File: ./src/builtin/export.c =====
#include "builtin.h"
#include "libft.h"
#include <stdio.h>

int     validate_export_argument(const char *s)
{
    int i;

    if (!s || !(ft_isalpha(s[0]) || s[0] == '_'))
        return (0);
    i = 1;
    while (s[i] && s[i] != '=')
    {
        if (!(ft_isalnum(s[i]) || s[i] == '_'))
            return (0);
        i++;
    }
    return (1);
}

int     export_variable(const char *arg, t_shell *shell)
{
    char    *eq;
    char    *key;
    char    *value;
    int             res;

    eq = ft_strchr(arg, '=');
    if (!eq)
        return (set_env_value(&shell->env, arg, ""));
    key = ft_substr(arg, 0, eq - arg);
    value = ft_strdup(eq + 1);
    if (!key || !value)
    {
        free(key);
        free(value);
        return (1);
    }
    res = set_env_value(&shell->env, key, value);
    free(key);
    free(value);
    return (res);
}

void    sort_and_print_env(t_env *env)
{
    print_env_list(env);
}

void    export_print_sorted(t_env *env)
{
    sort_and_print_env(env);
}

int     builtin_export(t_cmd *cmd, t_shell *shell)
{
    int i;

    if (!cmd->argv[1])
    {
        sort_and_print_env(shell->env);
        return (0);
    }
    i = 1;
    while (cmd->argv[i])
    {
        if (validate_export_argument(cmd->argv[i]))
            export_variable(cmd->argv[i], shell);
        else
            printf("export: `%s`: not a valid identifier\n", cmd->argv[i]);
        i++;
    }
    return (0);
}


===== File: ./src/builtin/unset.c =====
#include "builtin.h"

int     builtin_unset(t_cmd *cmd, t_shell *shell)
{
    int i;

    i = 1;
    while (cmd->argv[i])
    {
        unset_env_value(&shell->env, cmd->argv[i]);
        i++;
    }
    return (0);
}


===== File: ./src/builtin/export_utils.c =====
#include "builtin.h"
/* Utility functions are implemented in export.c. This file exists
   to satisfy the project structure. */


===== File: ./src/builtin/pwd.c =====
#include "builtin.h"
#include <unistd.h>
#include <limits.h>
#include <stdio.h>

int     builtin_pwd(void)
{
    char    cwd[PATH_MAX];

    if (getcwd(cwd, sizeof(cwd)))
    {
        printf("%s\n", cwd);
        return (0);
    }
    perror("pwd");
    return (1);
}


===== File: ./src/builtin/echo.c =====
#include "builtin.h"
#include "libft.h"

int     check_echo_flag(char *arg)
{
    int i;

    if (!arg || arg[0] != '-')
        return (0);
    i = 1;
    if (arg[i] == '\0')
        return (0);
    while (arg[i])
    {
        if (arg[i] != 'n')
            return (0);
        i++;
    }
    return (1);
}

int     builtin_echo(t_cmd *cmd)
{
    int i;
    int newline;

    i = 1;
    newline = 1;
    while (cmd->argv[i] && check_echo_flag(cmd->argv[i]))
    {
        newline = 0;
        i++;
    }
    while (cmd->argv[i])
    {
        printf("%s", cmd->argv[i]);
        if (cmd->argv[i + 1])
            printf(" ");
        i++;
    }
    if (newline)
        printf("\n");
    return (0);
}


===== File: ./src/builtin/exit.c =====
#include "builtin.h"
#include "libft.h"
#include <stdio.h>

int     count_args(t_cmd *cmd)
{
    int i;

    i = 0;
    while (cmd->argv && cmd->argv[i])
        i++;
    return (i);
}

int     is_valid_exit_code_arg(const char *arg)
{
    int i;

    if (!arg)
        return (0);
    i = 0;
    if (arg[i] == '+' || arg[i] == '-')
        i++;
    if (!arg[i])
        return (0);
    while (arg[i])
    {
        if (!ft_isdigit(arg[i]))
            return (0);
        i++;
    }
    return (1);
}

int     builtin_exit(t_cmd *cmd, t_shell *shell)
{
    long    code;

    printf("exit\n");
    if (cmd->argv[1])
    {
        if (!is_valid_exit_code_arg(cmd->argv[1]))
        {
            printf("exit: %s: numeric argument required\n", cmd->argv[1]);
            shell->last_exit_code = 2;
            shell->is_running = 0;
            return (2);
        }
        if (count_args(cmd) > 2)
        {
            printf("exit: too many arguments\n");
            shell->last_exit_code = 1;
            return (1);
        }
        code = ft_atol(cmd->argv[1]);
        shell->last_exit_code = (int)(code & 255);
        shell->is_running = 0;
        return (shell->last_exit_code);
    }
    shell->is_running = 0;
    return (shell->last_exit_code);
}


===== File: ./src/builtin/cd.c =====
#include "builtin.h"
#include "libft.h"
#include <unistd.h>
#include <stdio.h>

static char *get_target_path(t_cmd *cmd, t_shell *shell)
{
    if (cmd->argv[1])
        return (cmd->argv[1]);
    return (get_env_value(shell->env, "HOME"));
}

int     builtin_cd(t_cmd *cmd, t_shell *shell)
{
    char    *target;
    char    *oldpwd;
    char    *cwd;

    target = get_target_path(cmd, shell);
    if (!target)
    {
        printf("cd: HOME not set\n");
        return (1);
    }
    oldpwd = getcwd(NULL, 0);
    if (chdir(target) != 0)
    {
        perror("cd");
        free(oldpwd);
        return (1);
    }
    cwd = getcwd(NULL, 0);
    if (oldpwd)
    {
        set_env_value(&shell->env, "OLDPWD", oldpwd);
        free(oldpwd);
    }
    if (cwd)
    {
        set_env_value(&shell->env, "PWD", cwd);
        free(cwd);
    }
    return (0);
}

int     update_pwd(t_shell *shell)
{
    char *cwd;

    cwd = getcwd(NULL, 0);
    if (!cwd)
        return (1);
    set_env_value(&shell->env, "PWD", cwd);
    free(cwd);
    return (0);
}

int     update_oldpwd(t_shell *shell)
{
    char *cwd;

    cwd = getcwd(NULL, 0);
    if (!cwd)
        return (1);
    set_env_value(&shell->env, "OLDPWD", cwd);
    free(cwd);
    return (0);
}

int     change_dir(const char *path, t_shell *shell)
{
    char *oldpwd;

    oldpwd = getcwd(NULL, 0);
    if (chdir(path) != 0)
    {
        perror("cd");
        free(oldpwd);
        return (1);
    }
    if (oldpwd)
    {
        set_env_value(&shell->env, "OLDPWD", oldpwd);
        free(oldpwd);
    }
    update_pwd(shell);
    return (0);
}


===== File: ./src/cleanup/cleanup.c =====
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   cleanup.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pedroribeiro <pedroribeiro@student.42.f    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/08/04 15:20:07 by pedroribeir       #+#    #+#             */
/*   Updated: 2025/08/04 15:21:53 by pedroribeir      ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "cleanup.h"
#include <stdlib.h>


void    free_redirections(t_redir *redir)
{
    t_redir *tmp;

    while (redir)
    {
        tmp = redir->next;
        free(redir->target);
        free(redir);
        redir = tmp;
    }
}

void    free_command(t_cmd *cmd)
{
    if (!cmd)
        return;
    if (cmd->argv)
        free_split(cmd->argv);
    if (cmd->redir)
        free_redirections(cmd->redir);
    free(cmd);
}

void    free_shell(t_shell *shell)
{
    if (!shell)
        return;
    if (shell->env)
        free_env_list(shell->env);
}

void    deep_cleanup_on_error(t_shell *shell)
{
    exit_clean(shell, EXIT_FAILURE);
}


===== File: ./src/cleanup/exit.c =====
#include "cleanup.h"
#include <stdlib.h>
#include <readline/history.h>

void    exit_clean(t_shell *shell, int code)
{
    if (shell)
        free_shell(shell);
    rl_clear_history();
    exit(code);
}


===== File: ./src/exec/wait.c =====
#include "exec.h"
#include <sys/wait.h>

int g_exit_code = 0;
extern pid_t g_last_pid;

int wait_for_all(t_cmd *cmds)
{
    int     count;
    int     status;
    t_cmd   *tmp;

    count = 0;
    tmp = cmds;
    while (tmp)
    {
        count++;
        tmp = tmp->next;
    }
    status = 0;
    if (g_last_pid > 0)
        waitpid(g_last_pid, &status, 0);
    count--;
    while (count-- > 0)
        wait(NULL);
    update_exit_code_from_status(status);
    return (g_exit_code);
}

void    update_exit_code_from_status(int status)
{
    if (WIFEXITED(status))
        g_exit_code = WEXITSTATUS(status);
    else if (WIFSIGNALED(status))
        g_exit_code = 128 + WTERMSIG(status);
    else
        g_exit_code = 1;
}


===== File: ./src/exec/exec_pipeline.c =====
#include "exec.h"
#include "builtin.h"
#include <unistd.h>
#include <stdlib.h>

int     **g_pipes = NULL;
int     g_pipe_count = 0;

static int  count_cmds(t_cmd *cmds)
{
    int count;

    count = 0;
    while (cmds)
     {
        count++;
        cmds = cmds->next;
    }
    return (count);
}

int     execute_pipeline(t_cmd *cmds, t_shell *shell)
{
    int     cmd_count;
    int     i;
    int     fds[2];
    t_cmd   *tmp;

    if (!cmds)
        return (0);
    cmd_count = count_cmds(cmds);
    if (cmd_count == 1)
        return (execute_single_command(cmds, shell));
    g_pipe_count = setup_pipes(cmds, &g_pipes);
    if (g_pipe_count < 0)
        return (1);
    tmp = cmds;
    i = 0;
    while (tmp)
    {
        fds[0] = (i == 0) ? STDIN_FILENO : g_pipes[i - 1][0];
        fds[1] = (i == g_pipe_count) ? STDOUT_FILENO : g_pipes[i][1];
        if (spawn_child_process(tmp, shell, fds, i == g_pipe_count) < 0)
        {
            close_all_pipes(g_pipes, g_pipe_count);
            free_pipe_fds(g_pipes, g_pipe_count);
            return (1);
        }
        tmp = tmp->next;
        i++;
    }
    close_all_pipes(g_pipes, g_pipe_count);
    shell->last_exit_code = wait_for_all(cmds);
    free_pipe_fds(g_pipes, g_pipe_count);
    g_pipes = NULL;
    g_pipe_count = 0;
    return (shell->last_exit_code);
}


===== File: ./src/exec/pipes.c =====
#include "exec.h"
#include <stdlib.h>
#include <unistd.h>

int setup_pipes(t_cmd *cmds, int ***pipes)
{
    int     count;
    int     i;

    *pipes = NULL;
    count = 0;
    while (cmds)
    {
        count++;
        cmds = cmds->next;
    }
    count -= 1;
    if (count <= 0)
        return (0);
    *pipes = malloc(sizeof(int *) * count);
    if (!*pipes)
        return (-1);
    i = 0;
    while (i < count)
    {
        (*pipes)[i] = malloc(sizeof(int) * 2);
        if (!(*pipes)[i])
        {
            free_pipe_fds(*pipes, i);
            return (-1);
        }
        if (pipe((*pipes)[i]) == -1)
        {
            free_pipe_fds(*pipes, i + 1);
            return (-1);
        }
        i++;
    }
    return (count);
}

void    close_all_pipes(int **pipes, int count)
{
    int i;

    if (!pipes)
        return ;
    i = 0;
    while (i < count)
    {
        close(pipes[i][0]);
        close(pipes[i][1]);
        i++;
    }
}

void    free_pipe_fds(int **pipes, int count)
{
    int i;

    if (!pipes)
        return ;
    i = 0;
    while (i < count)
    {
        free(pipes[i]);
        i++;
    }
    free(pipes);
}


===== File: ./src/exec/exec_path.c =====
#include "exec.h"
#include <sys/stat.h>

int     is_path_absolute_or_relative(const char *cmd)
{
    return (cmd && (cmd[0] == '/' || cmd[0] == '.'));
}

int     is_valid_executable(const char *path)
{
    struct stat sb;

    if (!path)
        return (0);
    if (access(path, X_OK) != 0)
        return (0);
    if (stat(path, &sb) != 0)
        return (0);
    if (S_ISDIR(sb.st_mode))
        return (0);
    return (1);
}

char    *resolve_command_path(char *cmd, t_env *env)
{
    char    *path_env;
    char    **paths;
    char    *tmp;
    char    *candidate;
    int     i;

    if (is_path_absolute_or_relative(cmd))
    {
        if (is_valid_executable(cmd))
            return (ft_strdup(cmd));
        return (NULL);
    }
    path_env = get_env_value(env, "PATH");
    if (!path_env)
        return (NULL);
    paths = ft_split(path_env, ':');
    if (!paths)
        return (NULL);
    i = 0;
    while (paths[i])
    {
        tmp = ft_strjoin(paths[i], "/");
        candidate = ft_strjoin(tmp, cmd);
        free(tmp);
        if (is_valid_executable(candidate))
        {
            i = 0;
            while (paths[i])
                free(paths[i++]);
            free(paths);
            return (candidate);
        }
        free(candidate);
        i++;
    }
    i = 0;
    while (paths[i])
        free(paths[i++]);
    free(paths);
    return (NULL);
}


===== File: ./src/exec/exec_utils.c =====
#include "exec.h"
#include <stdio.h>

void    handle_exec_error(const char *msg)
{
    if (msg)
        perror(msg);
}


===== File: ./src/exec/exec_fork.c =====
#include "exec.h"
#include "builtin.h"
#include "redir.h"
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <errno.h>

extern int      **g_pipes;
extern int      g_pipe_count;
extern int      g_exit_code;

pid_t           g_last_pid = -1;

static void     free_envp(char **envp)
{
    int i;

    if (!envp)
        return ;
    i = 0;
    while (envp[i])
        free(envp[i++]);
    free(envp);
}

void    child_process_exec(t_cmd *cmd, t_shell *shell, int is_last)
{
    (void)is_last;
    if (handle_redirections(cmd) < 0)
        exit(1);
    if (is_builtin(cmd))
    {
        int status = execute_builtin(cmd, shell);
        exit(status);
    }
    exit(launch_execve(cmd, shell));
}

int spawn_child_process(t_cmd *cmd, t_shell *shell, int *fds, int is_last)
{
    pid_t pid;

    pid = fork();
    if (pid < 0)
    {
        handle_exec_error("fork");
        return (-1);
    }
    if (pid == 0)
    {
        if (fds[0] != STDIN_FILENO)
            dup2(fds[0], STDIN_FILENO);
        if (fds[1] != STDOUT_FILENO)
            dup2(fds[1], STDOUT_FILENO);
        close_all_pipes(g_pipes, g_pipe_count);
        child_process_exec(cmd, shell, is_last);
    }
    if (is_last)
        g_last_pid = pid;
    return (pid);
}

int execute_single_command(t_cmd *cmd, t_shell *shell)
{
    pid_t   pid;
    int     status;
    int     fds[2];

    if (!cmd)
        return (0);
    if (is_builtin(cmd))
    {
        shell->last_exit_code = execute_builtin(cmd, shell);
        return (shell->last_exit_code);
    }
    fds[0] = STDIN_FILENO;
    fds[1] = STDOUT_FILENO;
    pid = spawn_child_process(cmd, shell, fds, 1);
    if (pid < 0)
        return (shell->last_exit_code = 1);
    waitpid(pid, &status, 0);
    update_exit_code_from_status(status);
    shell->last_exit_code = g_exit_code;
    return (shell->last_exit_code);
}

int launch_execve(t_cmd *cmd, t_shell *shell)
{
    char    *path;
    char    **envp;
    int     ret;

    path = resolve_command_path(cmd->argv[0], shell->env);
    envp = env_to_str_array(shell->env);
    if (!path)
    {
        fprintf(stderr, "%s: command not found\n", cmd->argv[0]);
        free_envp(envp);
        return (127);
    }
    execve(path, cmd->argv, envp);
    ret = errno;
    handle_exec_error(cmd->argv[0]);
    free(path);
    free_envp(envp);
    if (ret == EACCES)
        return (126);
    return (127);
}


===== File: ./src/env/env_set.c =====
#include "env.h"

static int  replace_value(t_env *node, const char *value)
{
    char    *new_value;

    new_value = ft_strdup(value);
    if (!new_value)
        return (1);
    free(node->value);
    node->value = new_value;
    return (0);
}

t_env   *new_env_node(char *key, char *value)
{
    t_env   *node;

    node = malloc(sizeof(t_env));
    if (!node)
        return (NULL);
    node->key = ft_strdup(key);
    node->value = ft_strdup(value);
    node->next = NULL;
    if (!node->key || !node->value)
    {
        free(node->key);
        free(node->value);
        free(node);
        return (NULL);
    }
    return (node);
}

int     is_valid_env_key(const char *key)
{
    int i;

    if (!key || !*key)
        return (0);
    if (!(ft_isalpha(key[0]) || key[0] == '_'))
        return (0);
    i = 1;
    while (key[i])
    {
        if (!(ft_isalnum(key[i]) || key[i] == '_'))
            return (0);
        i++;
    }
    return (1);
}

int     set_env_value(t_env **env, const char *key, const char *value)
{
    t_env   *tmp;

    if (!env || !key || !value)
        return (1);
    if (!is_valid_env_key(key))
        return (1);
    tmp = *env;
    while (tmp)
    {
        if (ft_strncmp(tmp->key, key, ft_strlen(key)) == 0
            && tmp->key[ft_strlen(key)] == '\0')
            return (replace_value(tmp, value));
        tmp = tmp->next;
    }
    add_env_node((char *)key, (char *)value, env);
    return (0);
}

int     env_key_exists(t_env *env, const char *key)
{
    while (env)
    {
        if (ft_strncmp(env->key, key, ft_strlen(key)) == 0
            && env->key[ft_strlen(key)] == '\0')
            return (1);
        env = env->next;
    }
    return (0);
}

char    **env_to_str_array(t_env *env)
{
    size_t  count;
    size_t  i;
    char    **arr;
    t_env   *tmp;

    count = 0;
    i = 0;
    tmp = env;
    while (tmp)
    {
        count++;
        tmp = tmp->next;
    }
    arr = malloc(sizeof(char *) * (count + 1));
    if (!arr)
        return (NULL);
    tmp = env;
    while (tmp)
    {
        char *key_eq = ft_strjoin(tmp->key, "=");
        arr[i] = ft_strjoin(key_eq, tmp->value);
        free(key_eq);
        if (!arr[i])
        {
            while (i > 0)
                free(arr[--i]);
            free(arr);
            return (NULL);
        }
        i++;
        tmp = tmp->next;
    }
    arr[i] = NULL;
    return (arr);
}


===== File: ./src/env/env_unset.c =====
#include "env.h"

int     unset_env_value(t_env **env, const char *key)
{
    t_env   *cur;
    t_env   *prev;
    size_t  klen;

    if (!env || !*env || !key)
        return (1);
    cur = *env;
    prev = NULL;
    klen = ft_strlen(key);
    while (cur)
    {
        if (ft_strncmp(cur->key, key, klen) == 0 && cur->key[klen] == '\0')
        {
            if (prev)
                prev->next = cur->next;
            else
                *env = cur->next;
            free(cur->key);
            free(cur->value);
            free(cur);
            return (0);
        }
        prev = cur;
        cur = cur->next;
    }
    return (0);
}


===== File: ./src/env/env_utils.c =====
#include "env.h"

void	add_env_node(char *key, char *value, t_env **env_list)
{
	t_env	*new;
	t_env	*last;

	new = malloc(sizeof(t_env));
	if (!new)
		return ;
	new->key = ft_strdup(key);
	new->value = ft_strdup(value);
	new->next = NULL;
	if (!*env_list)
		*env_list = new;
	else
	{
		last = *env_list;
		while (last->next)
			last = last->next;
		last->next = new;
	}
}


===== File: ./src/env/env_free.c =====
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   env_free.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pedroribeiro <pedroribeiro@student.42.f    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/08/04 15:23:45 by pedroribeir       #+#    #+#             */
/*   Updated: 2025/08/04 15:24:07 by pedroribeir      ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "cleanup.h"

void	free_env_list(t_env *env)
{
	t_env	*tmp;

	while (env)
	{
		tmp = env->next;
		free(env->key);
		free(env->value);
		free(env);
		env = tmp;
	}
}



===== File: ./src/env/env_init.c =====
#include "env.h"

t_env	*init_env_from_environ(char **envp)
{
	t_env	*env;
	char	*sep;
	char	*key;
	char	*value;

	env = NULL;
	while (*envp)
	{
		sep = ft_strchr(*envp, '=');
		if (sep)
		{
			key = ft_substr(*envp, 0, sep - *envp);
			value = ft_strdup(sep + 1);
			add_env_node(key, value, &env);
			free(key);
			free(value);
		}
		envp++;
	}
	return (env);
}



===== File: ./src/env/env_get.c =====
#include "env.h"
#include <stdio.h>

char    *get_env_value(t_env *env, const char *key)
{
    size_t  klen;

    if (!env || !key)
        return (NULL);
    klen = ft_strlen(key);
    while (env)
    {
        if (ft_strncmp(env->key, key, klen) == 0 && env->key[klen] == '\0')
            return (env->value);
        env = env->next;
    }
    return (NULL);
}

int     env_has_key(t_env *env, const char *key)
{
    size_t  klen;

    if (!env || !key)
        return (0);
    klen = ft_strlen(key);
    while (env)
    {
        if (ft_strncmp(env->key, key, klen) == 0 && env->key[klen] == '\0')
            return (1);
        env = env->next;
    }
    return (0);
}

void    print_env_list(t_env *env)
{
    while (env)
    {
        if (env->key && env->value)
            printf("%s=%s\n", env->key, env->value);
        env = env->next;
    }
}


===== File: ./src/quotes/quote_type.c =====
#include "quotes.h"

int is_quote(char c)
{
    return (c == '\'' || c == '"');
}

int quote_type(char c)
{
    if (c == '\'')
        return ('\'');
    if (c == '"')
        return ('"');
    return (0);
}


===== File: ./src/quotes/quote_strip.c =====
#include "quotes.h"
#include "libft.h"
#include "utils.h"

char    *remove_quotes(const char *str)
{
    char    *out;
    size_t  i;
    size_t  j;
    int     quote;

    if (!str)
        return (NULL);
    out = safe_malloc(ft_strlen(str) + 1);
    i = 0;
    j = 0;
    quote = 0;
    while (str[i])
    {
        if (!quote && is_quote(str[i]))
            quote = str[i];
        else if (quote && str[i] == quote)
            quote = 0;
        else
            out[j++] = str[i];
        i++;
    }
    out[j] = '\0';
    return (out);
}



===== File: ./src/quotes/quote_check.c =====
#include "quotes.h"

int quotes_balanced(const char *line)
{
    int i;
    int quote;

    if (!line)
        return (1);
    i = 0;
    quote = 0;
    while (line[i])
    {
        if (!quote && is_quote(line[i]))
            quote = line[i];
        else if (quote && line[i] == quote)
            quote = 0;
        i++;
    }
    return (quote == 0);
}

int contains_unclosed_quotes(const char *s)
{
    if (!s)
        return (0);
    return (!quotes_balanced(s));
}

int is_quoted_segment(const char *s, int i)
{
    int idx;
    int quote;

    if (!s || i < 0)
        return (0);
    idx = 0;
    quote = 0;
    while (s[idx] && idx < i)
    {
        if (!quote && is_quote(s[idx]))
            quote = s[idx];
        else if (quote && s[idx] == quote)
            quote = 0;
        idx++;
    }
    return (quote != 0);
}


===== File: ./src/tests/01_pipeline_exec_fork_test.c =====

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/wait.h>
#include <string.h>
#include <errno.h>

#define MAX_CMDS 4

char *test_pipeline[][MAX_CMDS] = {
	{"echo", "hello world", NULL},
	{"ls", "-l", NULL},
	{"grep", ".c", NULL},
	{"wc", "-l", NULL}
};

void fatal(const char *msg)
{
	perror(msg);
	exit(EXIT_FAILURE);
}

void run_test_pipeline(void)
{
	int i = 0;
	int pipes[MAX_CMDS - 1][2];
	pid_t pids[MAX_CMDS];

	while (i < MAX_CMDS - 1)
	{
		if (pipe(pipes[i]) == -1)
			fatal("pipe");
		i++;
	}

	for (i = 0; i < MAX_CMDS; i++)
	{
		pids[i] = fork();
		if (pids[i] < 0)
			fatal("fork");

		if (pids[i] == 0)
		{
			// CHILD PROCESS

			if (i > 0)
			{
				if (dup2(pipes[i - 1][0], STDIN_FILENO) < 0)
					fatal("dup2 stdin");
			}
			if (i < MAX_CMDS - 1)
			{
				if (dup2(pipes[i][1], STDOUT_FILENO) < 0)
					fatal("dup2 stdout");
			}

			// Close all pipe ends in child
			for (int j = 0; j < MAX_CMDS - 1; j++)
			{
				close(pipes[j][0]);
				close(pipes[j][1]);
			}

			execlp(test_pipeline[i][0], test_pipeline[i][0], test_pipeline[i][1], test_pipeline[i][2], NULL);
			fatal("exec");
		}
	}

	// PARENT: Close all pipe ends
	for (i = 0; i < MAX_CMDS - 1; i++)
	{
		close(pipes[i][0]);
		close(pipes[i][1]);
	}

	// Wait all children
	for (i = 0; i < MAX_CMDS; i++)
	{
		int status;
		waitpid(pids[i], &status, 0);
		if (WIFEXITED(status))
			printf("[TEST] Child %d exited with code: %d\n", i, WEXITSTATUS(status));
		else if (WIFSIGNALED(status))
			printf("[TEST] Child %d killed by signal: %d\n", i, WTERMSIG(status));
		else
			printf("[TEST] Unknown termination of child %d\n", i);
	}
}

int main(void)
{
	printf("🧪 [TEST] Running fork + pipeline chain test...\n\n");
	run_test_pipeline();
	printf("\n✅ [TEST COMPLETE] If output makes sense and no leaks => PASS\n");
	return (0);
}


===== File: ./src/expansion/expand_exit.c =====
#include "expansion.h"
#include "libft.h"

/*
** expand_exit_status
** ---------------------------------------------------------------------------
** Converts the numeric exit status into a string so it can replace the special
** "$?" sequence in the input.  The returned string is dynamically allocated
** and must be freed by the caller.
*/
char    *expand_exit_status(const char *line, int status)
{
    (void)line;
    return (ft_itoa(status));
}


===== File: ./src/expansion/expand_utils.c =====

#include "expansion.h"
#include "libft.h"

/*
** is_expandable
** ---------------------------------------------------------------------------
** Checks if a character can start an environment variable name after the '$'
** sign.  Characters allowed are alphabetic letters, digits and the underscore
** character.  Returning 1 means the variable is expandable, 0 otherwise.
*/
int is_expandable(char c)
{
    if (ft_isalnum((unsigned char)c) || c == '_')
        return (1);
    return (0);
}

/*
** extract_var_key
** ---------------------------------------------------------------------------
** Given a string starting at the first character after '$', extracts the
** variable key composed of alphanumeric characters and underscores.  The
** length of the key is stored in `len` when it is not NULL.  The returned
** string is heap-allocated and should be freed by the caller.
*/
char    *extract_var_key(const char *line, int *len)
{
    int     idx;

    if (!line)
        return (NULL);
    idx = 0;
    while (line[idx] && (ft_isalnum((unsigned char)line[idx]) || line[idx] == '_'))
        idx++;
    if (len)
        *len = idx;
    return (ft_strndup(line, idx));
}


===== File: ./src/expansion/expand_main.c =====
#include "expansion.h"
#include "libft.h"

/*
** append_char
** ---------------------------------------------------------------------------
** Helper that appends a single character to a dynamically allocated string.
*/
static char  *append_char(char *str, char c)
{
    char    buf[2];
    char    *tmp;

    buf[0] = c;
    buf[1] = '\0';
    tmp = ft_strndup(buf, 1);
    str = ft_strjoin_free(str, tmp);
    free(tmp);
    return (str);
}

/*
** expand_variables
** ---------------------------------------------------------------------------
** Expands environment variables and the special `$?` sequence within the given
** line.  Expansion does not occur inside single quotes.  The returned string is
** dynamically allocated and must be freed by the caller.
*/
char    *expand_variables(const char *line, t_env *env, int last_status)
{
    char    *result;
    int     i;
    int     quote;

    if (!line)
        return (NULL);
    result = safe_strdup("");
    i = 0;
    quote = 0;
    while (line[i])
    {
        if (line[i] == '\'' || line[i] == '"')
        {
            if (!quote)
                quote = line[i];
            else if (quote == line[i])
                quote = 0;
            result = append_char(result, line[i++]);
        }
        else if (line[i] == '$' && quote != '\'')
        {
            if (line[i + 1] == '?')
            {
                char *status = expand_exit_status(&line[i], last_status);
                result = ft_strjoin_free(result, status);
                free(status);
                i += 2;
            }
            else if (line[i + 1] && is_expandable(line[i + 1]))
            {
                int     len;
                char    *key;
                char    *value;

                key = extract_var_key(&line[i + 1], &len);
                value = expand_env_value(key, env);
                free(key);
                result = ft_strjoin_free(result, value);
                free(value);
                i += len + 1;
            }
            else
                result = append_char(result, line[i++]);
        }
        else
            result = append_char(result, line[i++]);
    }
    return (result);
}



===== File: ./src/expansion/expand_env.c =====
#include "expansion.h"
#include "libft.h"

/*
** expand_env_value
** ---------------------------------------------------------------------------
** Retrieves the value of the given environment variable key from the `env`
** list.  If the key does not exist an empty string is returned.  The returned
** string is dynamically allocated and must be freed by the caller.
*/
char    *expand_env_value(const char *key, t_env *env)
{
    char    *value;

    if (!key)
        return (safe_strdup(""));
    value = get_env_value(env, key);
    if (!value)
        return (safe_strdup(""));
    return (safe_strdup(value));
}

/*
** expand_var_token
** ---------------------------------------------------------------------------
** Expands a token that represents a variable (e.g. "$HOME").  If the token
** does not start with '$' it is duplicated as-is.  The returned string is
** dynamically allocated and must be freed by the caller.
*/
char    *expand_var_token(const char *token, t_env *env)
{
    char    *key;
    char    *value;
    int     len;

    if (!token)
        return (NULL);
    if (token[0] != '$')
        return (safe_strdup(token));
    key = extract_var_key(token + 1, &len);
    value = expand_env_value(key, env);
    free(key);
    return (value);
}


===== File: ./src/input/prompt_state.c =====
#include "input.h"
#include "libft.h"
#include <unistd.h>

typedef struct s_prompt_info
{
    t_prompt_state  mode;
    int             last_status;
    int             interactive;
}   t_prompt_info;

static t_prompt_info g_prompt = {PROMPT_DEFAULT, 0, 0};

void    init_prompt(void)
{
    g_prompt.mode = PROMPT_DEFAULT;
    g_prompt.last_status = 0;
    g_prompt.interactive = isatty(STDIN_FILENO);
}

t_prompt_state  get_prompt_state(void)
{
    return (g_prompt.mode);
}

void    set_prompt_state(t_prompt_state state)
{
    g_prompt.mode = state;
}

void    set_last_status(int status)
{
    g_prompt.last_status = status;
}

int     get_last_status(void)
{
    return (g_prompt.last_status);
}

int     is_interactive_shell(void)
{
    return (g_prompt.interactive);
}

void    display_prompt(void)
{
    if (!g_prompt.interactive)
        return ;
    if (g_prompt.mode == PROMPT_HEREDOC)
        write(STDOUT_FILENO, "> ", 2);
    else
    {
        ft_putstr_fd("[", STDOUT_FILENO);
        ft_putnbr_fd(g_prompt.last_status, STDOUT_FILENO);
        ft_putstr_fd("] minishell$ ", STDOUT_FILENO);
    }
}

void    free_user_input(char *line)
{
        if (line)
                free(line);
}


===== File: ./src/input/read_input.c =====
#include <readline/readline.h>
#include <stdlib.h>
#include "input.h"

char    *read_user_input(void)
{
	char    *line;

    set_prompt_state(PROMPT_DEFAULT);
    display_prompt();
    line = readline(NULL);
    if (!line)
    {
            if (is_interactive_shell())
                    write(1, "exit\n", 5);
            return (NULL);
    }
    return (line);
}


===== File: ./src/input/readline_config.c =====
#include <readline/readline.h>
#include "input.h"

void	init_readline(void)
{
    if (!is_interactive_shell())
        return ;
    rl_catch_signals = 0;
    set_prompt_state(PROMPT_DEFAULT);
}


===== File: ./src/redir/redir_main.c =====
#include "redir.h"

/*
** handle_redirections
** ------------------------------------------------------------
** Iterate over the linked list of redirections attached to a
** command and apply each one.  If any redirection fails the
** function stops processing and returns -1 so the caller can
** handle the error appropriately.  On success it returns 0.
*/
int handle_redirections(t_cmd *cmd)
{
    t_redir *current;

    if (!cmd || !cmd->redir)
        return (0);
    current = cmd->redir;
    while (current)
    {
        if (redir_apply(current) < 0)
            return (-1);
        current = current->next;
    }
    return (0);
}


===== File: ./src/redir/redir_apply.c =====
#include "redir.h"

/*
** redir_apply
** ------------------------------------------------------------
** Dispatch function that chooses the correct handler for the
** given redirection node based on its type.  Returns 0 on success
** or -1 if the setup function reports an error or the type is
** unknown.
*/
int redir_apply(t_redir *redir)
{
    if (!redir)
        return (0);
    if (redir->type == TOKEN_REDIR_IN || redir->type == TOKEN_HEREDOC)
        return (setup_redir_input(redir));
    if (redir->type == TOKEN_REDIR_OUT || redir->type == TOKEN_REDIR_APPEND)
        return (setup_redir_output(redir));
    return (-1);
}



===== File: ./src/redir/heredoc.c =====
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <readline/readline.h>
#include "libft.h"
#include "input.h"
#include "redir.h"

/*
** heredoc
** ------------------------------------------------------------
** Implements the here-document feature.  A pipe is created and
** the user is prompted for input until the delimiter string is
** provided.  The collected lines are written to the pipe and the
** read end of the pipe is returned so it can be used as the
** command's STDIN.  On any error the function returns -1.
*/
int heredoc(const char *delimiter)
{
    int     fd[2];
    char    *line;

    if (pipe(fd) < 0)
        return (-1);
    while (1)
    {
        set_prompt_state(PROMPT_HEREDOC);
        display_prompt();
        line = readline(NULL);
        if (!line || !ft_strncmp(line, delimiter, ft_strlen(delimiter) + 1))
        {
            free(line);
            break ;
        }
        write(fd[1], line, ft_strlen(line));
        write(fd[1], "\n", 1);
        free(line);
    }
    close(fd[1]);
    set_prompt_state(PROMPT_DEFAULT);
    return (fd[0]);
}


===== File: ./src/redir/redir_input.c =====
#include <unistd.h>
#include <fcntl.h>
#include <stdio.h>
#include "redir.h"

/*
** open_input_file
** ------------------------------------------------------------
** Wrapper around open() for input files.  Returns the file
** descriptor on success or -1 on failure while printing the
** corresponding error using perror.
*/
int open_input_file(const char *filename)
{
    int fd;

    fd = open(filename, O_RDONLY);
    if (fd < 0)
        perror(filename);
    return (fd);
}

/*
** setup_redir_input
** ------------------------------------------------------------
** Handles input related redirections ("<" and heredoc).  It
** obtains the appropriate file descriptor and duplicates it onto
** STDIN.  The original descriptor is closed afterwards.  Returns
** 0 on success or -1 on failure.
*/
int setup_redir_input(t_redir *redir)
{
    int fd;

    if (redir->type == TOKEN_REDIR_IN)
        fd = open_input_file(redir->target);
    else if (redir->type == TOKEN_HEREDOC)
        fd = heredoc(redir->target);
    else
        return (0);
    if (fd < 0)
        return (-1);
    if (dup2(fd, STDIN_FILENO) < 0)
    {
        perror("dup2");
        close(fd);
        return (-1);
    }
    close(fd);
    return (0);
}


===== File: ./src/redir/redir_output.c =====
#include <unistd.h>
#include <fcntl.h>
#include <stdio.h>
#include "redir.h"

/*
** open_output_file
** ------------------------------------------------------------
** Opens or creates a file for output redirection.  If `append`
** is non-zero the file is opened in append mode otherwise it is
** truncated.  Returns the new file descriptor or -1 on failure.
*/
int open_output_file(const char *filename, int append)
{
    int flags;
    int fd;

    flags = O_WRONLY | O_CREAT;
    if (append)
        flags |= O_APPEND;
    else
        flags |= O_TRUNC;
    fd = open(filename, flags, 0644);
    if (fd < 0)
        perror(filename);
    return (fd);
}

/*
** setup_redir_output
** ------------------------------------------------------------
** Handles output related redirections ('>' and '>>').  The
** appropriate file is opened and duplicated onto STDOUT.  The
** temporary file descriptor is closed before returning.  Returns
** 0 on success or -1 on failure.
*/
int setup_redir_output(t_redir *redir)
{
    int fd;

    if (redir->type == TOKEN_REDIR_OUT)
        fd = open_output_file(redir->target, 0);
    else if (redir->type == TOKEN_REDIR_APPEND)
        fd = open_output_file(redir->target, 1);
    else
        return (0);
    if (fd < 0)
        return (-1);
    if (dup2(fd, STDOUT_FILENO) < 0)
    {
        perror("dup2");
        close(fd);
        return (-1);
    }
    close(fd);
    return (0);
}


===== File: ./src/parser/parser_split.c =====
#include "parser.h"

// Count how many command segments exist in the list of tokens
// Segments are separated by PIPE tokens. Returns 0 for empty list

int     count_command_segments(t_token *tokens)
{
    int count;

    if (!tokens)
        return (0);
    count = 1;
    while (tokens)
    {
        if (tokens->type == TOKEN_PIPE)
            count++;
        tokens = tokens->next;
    }
    return (count);
}

// Check if tokens contain at least one pipe

int     command_needs_pipe(t_token *tokens)
{
    while (tokens)
    {
        if (tokens->type == TOKEN_PIPE)
            return (1);
        tokens = tokens->next;
    }
    return (0);
}

// Determine if a command structure has no arguments and no redirections

int     command_is_empty(t_cmd *cmd)
{
    if (!cmd)
        return (1);
    if ((!cmd->argv || !cmd->argv[0]) && cmd->redir == NULL)
        return (1);
    return (0);
}

// Verify whether a token represents a redirection operator

int     is_redirection_token(t_token *token)
{
    if (!token)
        return (0);
    if (token->type == TOKEN_REDIR_IN || token->type == TOKEN_REDIR_OUT
        || token->type == TOKEN_REDIR_APPEND || token->type == TOKEN_HEREDOC)
        return (1);
    return (0);
}


===== File: ./src/parser/parser_utils.c =====
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   parser_utils.c                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pedroribeiro <pedroribeiro@student.42.f    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/06 12:27:50 by pedroribeir       #+#    #+#             */
/*   Updated: 2025/07/24 00:27:18 by pedroribeir      ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "parser.h"
#include "cleanup.h"
#include "libft.h"
#include <stdlib.h>

void    free_command_list(t_cmd *cmds)
{
    t_cmd   *tmp;

    while (cmds)
    {
        tmp = cmds->next;
        free_command(cmds);
        cmds = tmp;
    }
}

void    ft_add_arg(char ***argv, const char *value)
{
        size_t  len;
        char    **new_argv;
        size_t  i;
		
        if (!value)
                return ;
        len = 0;
        while (*argv && (*argv)[len])
                len++;
        new_argv = malloc(sizeof(char *) * (len + 2));
        if (!new_argv)
                return ;
        i = 0;
        while (*argv && (*argv)[i])
        {
                new_argv[i] = ft_strdup((*argv)[i]);
                i++;
        }
        new_argv[i++] = ft_strdup(value);
        new_argv[i] = NULL;
        if (*argv)
        {
                i = 0;
                while ((*argv)[i])
                        free((*argv)[i++]);
                free(*argv);
        }
        *argv = new_argv;
}


===== File: ./src/parser/parser_main.c =====
#include "parser.h"
#include "redir.h"
#include "libft.h"
#include <stdlib.h>


// Helpers to build redirection linked list

static t_redir  *new_redirection(t_token_type type, const char *target)
{
    t_redir *redir;

    redir = (t_redir *)malloc(sizeof(t_redir));
    if (!redir)
        return (NULL);
    redir->type = type;
    redir->target = ft_strdup(target);
    if (!redir->target)
    {
        free(redir);
        return (NULL);
    }
    redir->next = NULL;
    return (redir);
}


static void     add_redirection(t_redir **list, t_redir *new_redir)
{

    t_redir *tmp;

    if (!list || !new_redir)
        return ;
    if (!*list)
    {
        *list = new_redir;
        return ;
    }
    tmp = *list;
    while (tmp->next)
        tmp = tmp->next;
    tmp->next = new_redir;
}

// Parse tokens into a linked list of command structures
// Supports words, pipes and redirections

 t_cmd  *parse_tokens_to_cmds(t_token *tokens)
{
    t_cmd   *cmds;
    t_cmd   *current;
    int     segment_index;
    int     total_segments;
    int     needs_pipe;

    cmds = NULL;
    current = NULL;
    segment_index = 0;
    total_segments = count_command_segments(tokens);
    needs_pipe = command_needs_pipe(tokens);
    while (tokens)
    {
        if (!current && tokens->type != TOKEN_PIPE)
        {
            current = new_command();
            if (!current)
            {
                free_command_list(cmds);
                return (NULL);
            }
            if (needs_pipe && segment_index > 0)
                current->pipe_in = 1;
            add_command(&cmds, current);
        }
        if (tokens->type == TOKEN_WORD && current)
            ft_add_arg(&current->argv, tokens->value);
        else if (is_redirection_token(tokens) && current)
        {
            if (tokens->next && tokens->next->type == TOKEN_WORD)
            {
                t_redir *redir = new_redirection(tokens->type, tokens->next->value);
                if (!redir)
                {
                    free_command_list(cmds);
                    return (NULL);
                }
                add_redirection(&current->redir, redir);
                tokens = tokens->next;
            }
        }
        else if (tokens->type == TOKEN_PIPE)
        {
            if (current && !command_is_empty(current) && needs_pipe
                && segment_index < total_segments - 1)
                current->pipe_out = 1;
            current = NULL;
            segment_index++;
        }
        tokens = tokens->next;
    }
    return (cmds);
}



===== File: ./src/parser/parser_cmd.c =====
#include "parser.h"
#include <stdlib.h>

// Allocate and initialize a new command structure
// Returns NULL on allocation failure
// The command is initialized with empty argv and redirection list
// pipe flags and builtin flag are set to 0

t_cmd   *new_command(void)
{
    t_cmd   *cmd;

    cmd = (t_cmd *)malloc(sizeof(t_cmd));
    if (!cmd)
        return (NULL);
    cmd->argv = NULL;
    cmd->redir = NULL;
    cmd->pipe_in = 0;
    cmd->pipe_out = 0;
    cmd->is_builtin = 0;
    cmd->next = NULL;
    return (cmd);
}

// Append a command to the end of the command list
// If the list pointer is NULL, the new command becomes the head

void    add_command(t_cmd **cmds, t_cmd *new_cmd)
{
    t_cmd   *tmp;

    if (!cmds || !new_cmd)
        return ;
    if (!*cmds)
    {
        *cmds = new_cmd;
        return ;
    }
    tmp = *cmds;
    while (tmp->next)
        tmp = tmp->next;
    tmp->next = new_cmd;
}


===== File: ./src/tokenizer/token_free.c =====
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   token_free.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pedroribeiro <pedroribeiro@student.42.f    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/06 12:15:18 by pedroribeir       #+#    #+#             */
/*   Updated: 2025/07/24 00:28:02 by pedroribeir      ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "tokenizer.h"
#include <stdlib.h>



void	free_token_list(t_token *head)
{
	t_token *tmp;

    while (head)
    {
        tmp = head->next;
        free(head->value);
        free(head);
        head = tmp;
    }
}



===== File: ./src/tokenizer/tokenizer.c =====
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   tokenizer.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pedroribeiro <pedroribeiro@student.42.f    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/06 12:25:12 by pedroribeir       #+#    #+#             */
/*   Updated: 2025/06/06 12:25:13 by pedroribeir      ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "tokenizer.h"
#include "libft.h"
#include <stdlib.h>

static void	skip_whitespace(const char *line, int *i)
{
	while (line[*i] && is_space(line[*i]))
		(*i)++;
}

static void	handle_word_token(const char *line, int *i, t_token **head)
{
	const char	*start;
	int			length;
	char		*value;

	start = &line[*i];
	length = 0;
	while (line[*i] && !is_space(line[*i]) && !is_metachar(line[*i]))
	{
		(*i)++;
		length++;
	}
	value = ft_strndup(start, length);
	add_token(head, new_token(value, TOKEN_WORD));
}

static void	handle_metachar_token(const char *line, int *i, t_token **head)
{
	char		*value;
	int			type;

	value = ft_strndup(&line[*i], 1);
	type = token_type(&line[*i]);
	(*i)++;
	add_token(head, new_token(value, type));
}

t_token	*tokenize_input(const char *line)
{
	t_token	*head;
	int		i;

	if (!line)
		return (NULL);
	head = NULL;
	i = 0;
	while (line[i])
	{
		skip_whitespace(line, &i);
		if (line[i] && !is_metachar(line[i]))
			handle_word_token(line, &i, &head);
		else if (line[i] && is_metachar(line[i]))
			handle_metachar_token(line, &i, &head);
	}
	return (head);
}



===== File: ./src/tokenizer/token_utils.c =====
#include "tokenizer.h"  // Para os protótipos das funções que você está implementando
#include <stdlib.h>     // Para malloc


int	is_space(char c)
{
	return (c == ' ' || c == '\t' || c == '\n'
		|| c == '\v' || c == '\f' || c == '\r');
}

int	is_metachar(char c)
{
	return (c == '|' || c == '<' || c == '>');
}

#include <stdlib.h>

t_token	*new_token(const char *value, t_token_type type)
{
	t_token	*token;

	token = malloc(sizeof(t_token));
	if (!token)
		return (NULL);
	token->value = (char *)value;
	token->type = type;
	token->next = NULL;
	return (token);
}

void	add_token(t_token **list, t_token *new)
{
	t_token	*temp;

	if (!list || !new)
		return ;
	if (!*list)
	{
		*list = new;
		return ;
	}
	temp = *list;
	while (temp->next)
		temp = temp->next;
	temp->next = new;
}



===== File: ./src/tokenizer/token_type.c =====
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   token_type.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pedroribeiro <pedroribeiro@student.42.f    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/06 12:16:07 by pedroribeir       #+#    #+#             */
/*   Updated: 2025/06/06 12:25:30 by pedroribeir      ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "tokenizer.h"

int	token_type(const char *str)
{
	if (str == NULL)
		return (TOKEN_UNKNOWN);
	if (str[0] == '|' && str[1] == '|')
		return (TOKEN_OR_IF);
	if (str[0] == '&' && str[1] == '&')
		return (TOKEN_AND_IF);
	if (str[0] == '<' && str[1] == '<')
		return (TOKEN_HEREDOC);
	if (str[0] == '>' && str[1] == '>')
		return (TOKEN_REDIR_APPEND);
	if (str[0] == '<')
		return (TOKEN_REDIR_IN);
	if (str[0] == '>')
		return (TOKEN_REDIR_OUT);
	if (str[0] == '|')
		return (TOKEN_PIPE);
	return (TOKEN_WORD);
}



